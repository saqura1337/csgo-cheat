#include "Exploits.hpp"
#include "../Settings.hpp"
#include "../Tools/Tools.hpp"
#include "../RageBot/RageBot.hpp"
#include "../Packet/PacketManager.hpp"
#include "../Prediction/EnginePrediction.hpp"
#include "../Movement/AutoPeek.hpp"
#include "../Animations/LocalAnimations.hpp"
#include "../SDK/Math/Math.hpp"

void C_ExploitSystem::Instance()
{
	if (!m_Data.m_Selected || !g_PacketManager->GetModifablePacket())
		return;

	C_BaseCombatWeapon* pCombatWeapon = g_sdk.local->m_hActiveWeapon().Get();
	if (!pCombatWeapon || pCombatWeapon->m_iItemDefinitionIndex() == WEAPON_REVOLVER || !(g_PacketManager->GetModifableCommand()->m_nButtons & IN_ATTACK))
		return;

	if (!pCombatWeapon->IsGun() || !g_sdk.accuracy_data.m_bCanFire_Default || !g_sdk.accuracy_data.m_bCanFire_Shift)
		return;

	if (m_Data.m_ShiftTick)
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS(g_interfaces.globals->m_realtime + g_cfg->m_flRechargeTime);
		return;
	}

	if (m_Data.m_Selected == EXPLOIT::DOUBLETAP)
	{
		m_Data.m_ShiftMode = MODE::SHIFT_MOVE;
		m_Data.m_ShiftAmount = m_Data.m_NextShift;

		return;
	}

	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftAmount = m_Data.m_NextShift;
	m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand()->m_nCommand;
	m_Data.m_ShiftedTickbase = m_Data.m_ShiftAmount;
}

void C_ExploitSystem::BreakLagCompensation()
{
	VIRTUALIZER1_START;
	if ((m_Data.m_Selected != EXPLOIT::DOUBLETAP) || m_Data.m_ShiftTick || !g_PacketManager->GetModifablePacket())
		return;

	C_BaseCombatWeapon* pCombatWeapon = g_sdk.local->m_hActiveWeapon().Get();
	if (!pCombatWeapon || pCombatWeapon->m_iItemDefinitionIndex() == WEAPON_REVOLVER || (g_sdk.accuracy_data.m_bCanFire_Default && (g_PacketManager->GetModifableCommand()->m_nButtons & IN_ATTACK)))
		return;

	int32_t iCurrentWeapon = -1;
	switch (pCombatWeapon->m_iItemDefinitionIndex())
	{
	case WEAPON_AK47:
	case WEAPON_M4A1:
	case WEAPON_M4A1_SILENCER:
	case WEAPON_FAMAS:
	case WEAPON_SG553:
	case WEAPON_GALILAR:
		iCurrentWeapon = RAGE_WEAPON::RIFLE; break;
	case WEAPON_MAG7:
	case WEAPON_NOVA:
	case WEAPON_XM1014:
	case WEAPON_SAWEDOFF:
		iCurrentWeapon = RAGE_WEAPON::SHOTGUN; break;
	case WEAPON_MP7:
	case WEAPON_MP9:
	case WEAPON_P90:
	case WEAPON_M249:
	case WEAPON_NEGEV:
	case WEAPON_UMP45:
		iCurrentWeapon = RAGE_WEAPON::SMG; break;
	case WEAPON_SCAR20:
	case WEAPON_G3SG1:
		iCurrentWeapon = RAGE_WEAPON::AUTO; break;
	case WEAPON_GLOCK:
	case WEAPON_HKP2000:
	case WEAPON_USP_SILENCER:
	case WEAPON_CZ75A:
	case WEAPON_TEC9:
	case WEAPON_ELITE:
	case WEAPON_FIVESEVEN:
	case WEAPON_P250:
		iCurrentWeapon = RAGE_WEAPON::PISTOL; break;
	case WEAPON_SSG08:
		iCurrentWeapon = RAGE_WEAPON::SCOUT; break;
	case WEAPON_AWP:
		iCurrentWeapon = RAGE_WEAPON::AWP; break;
	case WEAPON_DEAGLE:
		iCurrentWeapon = RAGE_WEAPON::DEAGLE; break;
	case WEAPON_REVOLVER:
		iCurrentWeapon = RAGE_WEAPON::REVOLVER; break;
	default: iCurrentWeapon = -1;
	}

	if (iCurrentWeapon < 0)
		return;

	if (!g_cfg->m_aRageSettings[iCurrentWeapon].m_DoubleTapOptions[1])
		return;

	if (g_sdk.peek.m_bIsPeeking)
	{
		m_Data.m_ShiftAmount = 0;
		m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	}
	else
	{
		m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
		m_Data.m_ShiftAmount = 13;
	}
	VIRTUALIZER1_END;
}

void C_ExploitSystem::SetupCommand()
{
	g_sdk.accuracy_data.m_bRestoreAutoStop = true;
	if (!g_sdk.local || !g_sdk.local->IsAlive())
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;

		g_sdk.packet.m_MaxChoke = 13;
		return;
	}

	if ((g_sdk.local->m_fFlags() & FL_FROZEN) /*|| ( *g_interfaces.game_rules )->IsFreezePeriod( )*/)
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;

		g_sdk.packet.m_MaxChoke = 13;
		return;
	}

	C_BaseCombatWeapon* pCombatWeapon = g_sdk.local->m_hActiveWeapon().Get();
	if (!pCombatWeapon)
		return;

	if (g_sdk.packet.m_bFakeDuck)
	{
		m_Data.m_TicksAllowedForProcessing = 0;
		m_Data.m_Selected = 0;

		g_sdk.packet.m_MaxChoke = 13;
		return;
	}

	bool bIsDoubleTapActive = g_Tools->IsBindActive(g_cfg->m_aDoubleTap);
	bool bIsHideShotsActive = g_Tools->IsBindActive(g_cfg->m_aHideShots);

	int m_OldSelected = m_Data.m_Selected;

	m_Data.m_Selected = 0;
	if (bIsDoubleTapActive)
		m_Data.m_Selected = EXPLOIT::DOUBLETAP;
	else if (bIsHideShotsActive)
		m_Data.m_Selected = EXPLOIT::HIDESHOTS;

	if (!m_OldSelected && m_Data.m_Selected)
	{
		m_Data.m_ChargeCommand = g_PacketManager->GetModifableCommand()->m_nCommand;
		m_Data.m_ChargeAmount = 17 - m_Data.m_TicksAllowedForProcessing;
	}

	bool bResetting = false;
	if (m_OldSelected == EXPLOIT::DOUBLETAP || m_OldSelected == EXPLOIT::HIDESHOTS)
	{
		if (!m_Data.m_Selected)
		{
			m_Data.m_NextShift = m_Data.m_TicksAllowedForProcessing;
			m_Data.m_ShiftMode = MODE::SHIFT_MOVE;
			m_Data.m_ShiftAmount = m_Data.m_NextShift;
			m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand()->m_nCommand;
			m_Data.m_ShiftedTickbase = m_Data.m_ShiftAmount;
		}
	}

	if (!m_OldSelected && m_Data.m_Selected)
		m_Data.m_bSkipInterpolation = true;

	m_Data.m_NextShift = 0;
	switch (m_Data.m_Selected)
	{
	case EXPLOIT::DOUBLETAP: m_Data.m_NextShift = 13; break;
	case EXPLOIT::HIDESHOTS: m_Data.m_NextShift = 9; break;
	}

	m_Data.m_ForceSend = false;
	if (!pCombatWeapon->CanShift())
		m_Data.m_NextShift = 0;

	g_sdk.packet.m_MaxChoke = 13;
	if (m_Data.m_Selected)
	{
		g_sdk.packet.m_MaxChoke = 1;
		if (m_Data.m_ShiftTick)
		{
			m_Data.m_NextShift = 0;
			if (TIME_TO_TICKS(g_interfaces.globals->m_realtime) == m_Data.m_ShiftTick)
			{
				m_Data.m_ChargeCommand = g_PacketManager->GetModifableCommand()->m_nCommand;
				m_Data.m_ChargeAmount = 17 - m_Data.m_TicksAllowedForProcessing;
				m_Data.m_bSkipInterpolation = true;
			}
		}
	}
}

bool C_ExploitSystem::IsFinalTick()
{
	if (!g_interfaces.engine->IsInGame() || !g_interfaces.engine->IsConnected())
		return true;

	if (!g_sdk.local || !g_sdk.local->IsAlive())
		return true;

	if (!m_Data.m_Selected || !m_Data.m_ShiftAmount)
		return true;

	return false;
}

int32_t C_ExploitSystem::GetNetworkTickbase(int32_t nCommand)
{
	int32_t nTickbase = g_sdk.local->m_nTickBase();
	if (m_Data.m_Selected == DOUBLETAP)
		return nTickbase;

	if (nCommand == m_Data.m_ShiftCommand)
		return nTickbase - m_Data.m_ShiftedTickbase;
	else if (nCommand == m_Data.m_ShiftCommand + 1)
		return nTickbase + m_Data.m_ShiftedTickbase;

	return nTickbase;
}

bool C_ExploitSystem::PerformCommand()
{
	m_Data.m_TicksToStop = 0;
	if (m_Data.m_ShiftTick || !m_Data.m_ShiftingTickbase || m_Data.m_ShiftMode != MODE::SHIFT_MOVE)
		return true;

	C_BaseCombatWeapon* pCombatWeapon = g_sdk.local->m_hActiveWeapon().Get();
	if (!pCombatWeapon)
		return false;

	C_CSWeaponData* pWeaponData = pCombatWeapon->GetWeaponData();
	if (!pWeaponData)
		return false;

	int32_t iCurrentWeapon = -1;
	switch (pCombatWeapon->m_iItemDefinitionIndex())
	{
	case WEAPON_AK47:
	case WEAPON_M4A1:
	case WEAPON_M4A1_SILENCER:
	case WEAPON_FAMAS:
	case WEAPON_SG553:
	case WEAPON_GALILAR:
		iCurrentWeapon = RAGE_WEAPON::RIFLE; break;
	case WEAPON_MAG7:
	case WEAPON_NOVA:
	case WEAPON_XM1014:
	case WEAPON_SAWEDOFF:
		iCurrentWeapon = RAGE_WEAPON::SHOTGUN; break;
	case WEAPON_MP7:
	case WEAPON_MP9:
	case WEAPON_P90:
	case WEAPON_M249:
	case WEAPON_NEGEV:
	case WEAPON_UMP45:
		iCurrentWeapon = RAGE_WEAPON::SMG; break;
	case WEAPON_SCAR20:
	case WEAPON_G3SG1:
		iCurrentWeapon = RAGE_WEAPON::AUTO; break;
	case WEAPON_GLOCK:
	case WEAPON_HKP2000:
	case WEAPON_USP_SILENCER:
	case WEAPON_CZ75A:
	case WEAPON_TEC9:
	case WEAPON_ELITE:
	case WEAPON_FIVESEVEN:
	case WEAPON_P250:
		iCurrentWeapon = RAGE_WEAPON::PISTOL; break;
	case WEAPON_SSG08:
		iCurrentWeapon = RAGE_WEAPON::SCOUT; break;
	case WEAPON_AWP:
		iCurrentWeapon = RAGE_WEAPON::AWP; break;
	case WEAPON_DEAGLE:
		iCurrentWeapon = RAGE_WEAPON::DEAGLE; break;
	case WEAPON_REVOLVER:
		iCurrentWeapon = RAGE_WEAPON::REVOLVER; break;
	default: iCurrentWeapon = -1;
	}

	if (iCurrentWeapon < 0)
		return false;

	float_t flMaxSpeed = g_sdk.local->GetMaxPlayerSpeed();
	if (g_sdk.local->m_vecVelocity().Length2D())
	{
		float_t flSideMove = g_PacketManager->GetModifableCommand()->m_flSideMove;
		float_t flForwardMove = g_PacketManager->GetModifableCommand()->m_flForwardMove;

		g_PredictionSystem->Instance();

		float_t flMaxSpeed = g_sdk.local->GetMaxPlayerSpeed();
		for (; m_Data.m_TicksToStop <= 6; m_Data.m_TicksToStop++)
		{
			QAngle angResistance = QAngle(0, 0, 0);
			Math::VectorAngles((g_sdk.local->m_vecVelocity() * -1.f), angResistance);

			angResistance.yaw = g_PacketManager->GetModifableCommand()->m_angViewAngles.yaw - angResistance.yaw;
			angResistance.pitch = g_PacketManager->GetModifableCommand()->m_angViewAngles.pitch - angResistance.pitch;

			Vector vecResistance = Vector(0, 0, 0);
			Math::AngleVectors(angResistance, vecResistance);

			g_PacketManager->GetModifableCommand()->m_flForwardMove = std::clamp(vecResistance.x, -450.f, 450.0f);
			g_PacketManager->GetModifableCommand()->m_flSideMove = std::clamp(vecResistance.y, -450.f, 450.0f);

			g_interfaces.prediction->SetupMove(g_sdk.local, g_PacketManager->GetModifableCommand(), g_interfaces.move_helper, &m_MoveData);
			g_interfaces.game_movement->SetupMovementBounds(&m_MoveData);
			g_interfaces.game_movement->ProcessMovement(g_sdk.local, &m_MoveData);
			g_interfaces.prediction->FinishMove(g_sdk.local, g_PacketManager->GetModifableCommand(), &m_MoveData);

			if (g_sdk.local->m_vecVelocity().Length2D() < flMaxSpeed * 0.34f)
				break;
		}

		g_PacketManager->GetModifableCommand()->m_flSideMove = flSideMove;
		g_PacketManager->GetModifableCommand()->m_flForwardMove = flForwardMove;

		g_PredictionSystem->RestoreNetvars(g_PacketManager->GetModifableCommand()->m_nCommand);
	}

	g_PacketManager->GetModifableCommand()->m_nButtons &= ~(IN_ATTACK | IN_ATTACK2);
	if (m_Data.m_RemainToShift <= m_Data.m_TicksToStop && !g_cfg->m_aRageSettings[iCurrentWeapon].m_DoubleTapOptions[0])
	{
		QAngle angResistance = QAngle(0, 0, 0);
		Math::VectorAngles((g_sdk.local->m_vecVelocity() * -1.f), angResistance);

		angResistance.yaw = g_PacketManager->GetModifableCommand()->m_angViewAngles.yaw - angResistance.yaw;
		angResistance.pitch = g_PacketManager->GetModifableCommand()->m_angViewAngles.pitch - angResistance.pitch;

		Vector vecResistance = Vector(0, 0, 0);
		Math::AngleVectors(angResistance, vecResistance);

		g_PacketManager->GetModifableCommand()->m_flForwardMove = std::clamp(vecResistance.x, -450.f, 450.0f);
		g_PacketManager->GetModifableCommand()->m_flSideMove = std::clamp(vecResistance.y, -450.f, 450.0f);
	}
	else if (g_cfg->m_aRageSettings[iCurrentWeapon].m_DoubleTapOptions[0])
	{
		if (g_PacketManager->GetModifableCommand()->m_flSideMove > 5.0f)
			g_PacketManager->GetModifableCommand()->m_flSideMove = 450.0f;
		else if (g_PacketManager->GetModifableCommand()->m_flSideMove < -5.0f)
			g_PacketManager->GetModifableCommand()->m_flSideMove = -450.0f;

		if (g_PacketManager->GetModifableCommand()->m_flForwardMove > 5.0f)
			g_PacketManager->GetModifableCommand()->m_flForwardMove = 450.0f;
		else if (g_PacketManager->GetModifableCommand()->m_flForwardMove < -5.0f)
			g_PacketManager->GetModifableCommand()->m_flForwardMove = -450.0f;
	}

	g_AutoPeek->Instance();
	g_PredictionSystem->Instance();

	//if (g_PacketManager->GetModifableCommand()->m_nTickCount != INT_MAX && g_interfaces.client_state->m_nDeltaTick() > 0) {
	//	g_interfaces.prediction->Update(
	//		g_interfaces.client_state->m_nDeltaTick(), true,
	//		g_interfaces.client_state->m_nLastCommandAck(),
	//		g_interfaces.client_state->m_nLastOutgoingCommand() + g_interfaces.client_state->m_nChokedCommands()
	//	);
	//}

	g_PacketManager->GetModifablePacket() = false;

	if (m_Data.m_IsFinalTick)
		g_PacketManager->GetModifablePacket() = true;

	if (g_PacketManager->GetModifablePacket())
		g_PacketManager->PushCommand(g_PacketManager->GetModifableCommand()->m_nCommand);

	return false;
}

void C_ExploitSystem::PerformPackets()
{
	if (!m_Data.m_ShiftAmount || m_Data.m_ShiftMode != MODE::SHIFT_MOVE)
		return;

	for (int32_t iShiftTime = 0; iShiftTime < m_Data.m_ShiftAmount; iShiftTime++)
	{
		m_Data.m_RemainToShift = m_Data.m_ShiftAmount - iShiftTime;
		m_Data.m_IsFinalTick = m_Data.m_RemainToShift == 1;
		m_Data.m_ShiftingTickbase = true;

		g_sdk.hooks.originals.m_CL_Move(0.0f, m_Data.m_IsFinalTick);
	}

	m_Data.m_ShiftingTickbase = false;
	m_Data.m_TicksAllowedForProcessing = 0;
	m_Data.m_ShiftTick = TIME_TO_TICKS(g_interfaces.globals->m_realtime + g_cfg->m_flRechargeTime);
	m_Data.m_ShiftAmount = 0;
	m_Data.m_NextShift = 0;
	m_Data.m_IsFinalTick = false;
}

void C_ExploitSystem::ShiftTickbase(int nAmount)
{
	m_Data.m_ShiftAmount = nAmount;
	m_Data.m_ShiftedTickbase = nAmount;
	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand()->m_nCommand;
}

bool C_ExploitSystem::IsAllowedToRun()
{
	if (!g_interfaces.engine->IsInGame() || !g_interfaces.engine->IsConnected())
		return true;

	if (!g_sdk.local || !g_sdk.local->IsAlive() || !m_Data.m_Selected)
		return true;

	if (g_sdk.packet.m_bFakeDuck)
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS(g_interfaces.globals->m_realtime + g_cfg->m_flRechargeTime);
		return true;
	}

	if (m_Data.m_ShiftTick)
	{
		if (TIME_TO_TICKS(g_interfaces.globals->m_realtime) <= m_Data.m_ShiftTick)
			return true;
	}

	m_Data.m_ShiftTick = 0;
	if (m_Data.m_TicksAllowedForProcessing > 16)
	{
		m_Data.m_bSkipInterpolation = false;
		return true;
	}

	m_Data.m_TicksAllowedForProcessing++;
	return false;
}